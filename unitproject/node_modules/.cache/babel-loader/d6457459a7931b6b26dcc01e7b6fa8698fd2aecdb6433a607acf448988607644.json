{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zombi\\\\Desktop\\\\React Project\\\\UnitProject\\\\unitproject\\\\src\\\\App.js\",\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Navbar from './Navbar';\nimport Message from './components/Message';\nimport Wordle from './components/Wordle';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s2();\n  var _s = $RefreshSig$();\n  const [wordSolution, setWord] = useState('');\n  var url = './data.json'; // Ensure the path is correct\n\n  const changeWordToShow = () => {\n    _s();\n    fetch(url).then(response => response.json()).then(data => console.log(data));\n    useEffect(() => {\n      changeWordToShow();\n    }, []);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Message, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 5\n      }, this), wordSolution && /*#__PURE__*/_jsxDEV(Wordle, {\n        wordSolution: wordSolution\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"solution-length\",\n        children: [\"Length: \", wordSolution.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true);\n  };\n  _s(changeWordToShow, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n}\n_s2(App, \"bflliZk96JvHyqe1rMC9QxGLtyQ=\");\n_c = App;\nexport default App;\n\n/*import React, { useState,useEffect} from 'react'\r\nimport Navbar from './Navbar'\r\nimport Message from './components/Message'\r\nimport Wordle from './components/Wordle'\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n\t//wordSolution is the random solution for each game the user wants to play\r\n\tconst [wordSolution, setWord] = useState('')\r\n\t\r\n\tvar url = './data_folder/data.json'\r\n\t\t\r\n\tconst changeWordToShow= () =>{\r\n\tfetch('https://random-word-api.herokuapp.com/word')\r\n\tfetch(url)\r\n\t.then((response) => {\r\n\t\t\r\n\t\treturn response.json();\r\n\t\t})\r\n\t.then(data => {\r\n\t\tconsole.log(data)\r\n\t\tif (data.length > 0) {\r\n\t\t\tfor(let word of data){\r\n\t\t\t\tsetWord(word)\r\n\t\t\t\t\r\n\t\t\t\tbreak\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t}).catch(err => {\r\n\t\t\r\n\t\tconsole.log(\"Error \" + err);\r\n\t});\r\n\t}\r\n\r\n\t\r\n\r\n\r\n\tuseEffect(() => {\r\n        changeWordToShow();\r\n    }, []);\r\n\r\n\t\r\n\t\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Navbar />\r\n\t\t\t<Message />\r\n\t\t\t{wordSolution && <Wordle wordSolution={wordSolution} /> }\r\n\t\t\t\r\n\t\t\t\t<div className='solution-length'>\r\n\t\t\t\t\tLength: {wordSolution.length}\r\n\t\t\t\t\t\r\n\t\t\t\t</div>\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t</>\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\r\n\t\t\r\n\t);\r\n//}\r\n\r\n\r\n\texport default App;*/\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Navbar","Message","Wordle","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s2","_s","$RefreshSig$","wordSolution","setWord","url","changeWordToShow","fetch","then","response","json","data","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","className","length","_c","$RefreshReg$"],"sources":["C:/Users/zombi/Desktop/React Project/UnitProject/unitproject/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Navbar from './Navbar';\r\nimport Message from './components/Message';\r\nimport Wordle from './components/Wordle';\r\n\t\r\n\tfunction App() {\r\n\t  const [wordSolution, setWord] = useState('');\r\n\t  \r\n\t  var url = './data.json'; // Ensure the path is correct\r\n\t\r\n\t  const changeWordToShow = () => {\r\n\t\tfetch(url)\r\n\t\t  .then(response => response.json())\r\n\t\t  .then(data => console.log(data))\r\n\t\t\t\r\n\t\t\t\r\n\t  \r\n\t\r\n\t  useEffect(() => {\r\n\t\tchangeWordToShow();\r\n\t  }, []);\r\n\t\r\n\t  return (\r\n\t\t<>\r\n\t\t  <Navbar />\r\n\t\t  <Message />\r\n\t\t  {wordSolution && <Wordle wordSolution={wordSolution} />}\r\n\t\t  <div className='solution-length'>\r\n\t\t\tLength: {wordSolution.length}\r\n\t\t  </div>\r\n\t\t</>\r\n\t  );\r\n\t}\r\n\t}\r\n\t\r\n\texport default App;\r\n\r\n/*import React, { useState,useEffect} from 'react'\r\nimport Navbar from './Navbar'\r\nimport Message from './components/Message'\r\nimport Wordle from './components/Wordle'\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n\t//wordSolution is the random solution for each game the user wants to play\r\n\tconst [wordSolution, setWord] = useState('')\r\n\t\r\n\tvar url = './data_folder/data.json'\r\n\t\t\r\n\tconst changeWordToShow= () =>{\r\n\tfetch('https://random-word-api.herokuapp.com/word')\r\n\tfetch(url)\r\n\t.then((response) => {\r\n\t\t\r\n\t\treturn response.json();\r\n\t\t})\r\n\t.then(data => {\r\n\t\tconsole.log(data)\r\n\t\tif (data.length > 0) {\r\n\t\t\tfor(let word of data){\r\n\t\t\t\tsetWord(word)\r\n\t\t\t\t\r\n\t\t\t\tbreak\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t}).catch(err => {\r\n\t\t\r\n\t\tconsole.log(\"Error \" + err);\r\n\t});\r\n\t}\r\n\r\n\t\r\n\r\n\r\n\tuseEffect(() => {\r\n        changeWordToShow();\r\n    }, []);\r\n\r\n\t\r\n\t\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Navbar />\r\n\t\t\t<Message />\r\n\t\t\t{wordSolution && <Wordle wordSolution={wordSolution} /> }\r\n\t\t\t\r\n\t\t\t\t<div className='solution-length'>\r\n\t\t\t\t\tLength: {wordSolution.length}\r\n\t\t\t\t\t\r\n\t\t\t\t</div>\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t</>\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\r\n\t\t\r\n\t);\r\n//}\r\n\r\n\r\n\texport default App;*/\r\n\t\r\n\t\r\n\t\t  \r\n\t\r\n\r\n\r\n\t\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,OAAOC,MAAM,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAExC,SAASC,GAAGA,CAAA,EAAG;EAAAC,GAAA;EAAA,IAAAC,EAAA,GAAAC,YAAA;EACb,MAAM,CAACC,YAAY,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAE5C,IAAIe,GAAG,GAAG,aAAa,CAAC,CAAC;;EAEzB,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;IAAAL,EAAA;IAChCM,KAAK,CAACF,GAAG,CAAC,CACPG,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAIC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC,CAAC;IAKjCpB,SAAS,CAAC,MAAM;MACjBe,gBAAgB,CAAC,CAAC;IACjB,CAAC,EAAE,EAAE,CAAC;IAEN,oBACDV,OAAA,CAAAE,SAAA;MAAAgB,QAAA,gBACElB,OAAA,CAACJ,MAAM;QAAAuB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACVtB,OAAA,CAACH,OAAO;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EACVf,YAAY,iBAAIP,OAAA,CAACF,MAAM;QAACS,YAAY,EAAEA;MAAa;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACvDtB,OAAA;QAAKuB,SAAS,EAAC,iBAAiB;QAAAL,QAAA,GAAC,UAC1B,EAACX,YAAY,CAACiB,MAAM;MAAA;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtB,CAAC;IAAA,eACN,CAAC;EAEJ,CAAC;EAAAjB,EAAA,CAtBOK,gBAAgB;AAuBxB;AAACN,GAAA,CA5BQD,GAAG;AAAAsB,EAAA,GAAHtB,GAAG;AA8BZ,eAAeA,GAAG;;AAEnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzEA,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
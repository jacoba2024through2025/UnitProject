{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nconst useGame = wordSolution => {\n  _s();\n  const [turn, setTurn] = useState(0);\n  const [currentGuess, setCurrentGuess] = useState(\"\");\n  const [guesses, setGuesses] = useState([]);\n  const [history, setHistory] = useState([]);\n  const [isCorrect, setIsCorrect] = useState(false);\n  const formatUserGuess = () => {\n    let solutionArray = [...wordSolution];\n    let changeUserGuess = [...currentGuess].map(l => ({\n      key: l,\n      color: \"grey\"\n    }));\n\n    // Finds any green letters\n    changeUserGuess.forEach((l, i) => {\n      if (solutionArray[i] === l.key) {\n        changeUserGuess[i].color = \"green\";\n        solutionArray[i] = null;\n      }\n    });\n\n    // Finds any yellow letters\n    changeUserGuess.forEach((l, i) => {\n      if (solutionArray.includes(l.key) && l.color !== \"green\") {\n        changeUserGuess[i].color = \"yellow\";\n        solutionArray[solutionArray.indexOf(l.key)] = null; // Correcting to null\n      }\n    });\n    return changeUserGuess; // Returning the formatted guess\n  };\n  const addNewGuess = () => {\n    addNewGuess(formatted);\n  };\n  const handleKeyUp = ({\n    key\n  }) => {\n    if (key === \"Enter\") {\n      if (turn > 5) {\n        console.log(\"All guesses have been used\");\n        return;\n      }\n      if (history.includes(currentGuess)) {\n        console.log(\"You have already guessed that word!\");\n        return;\n      }\n      if (currentGuess.length !== wordSolution.length) {\n        console.log(`Word must be ${wordSolution.length} chars long`);\n        return;\n      }\n      const formatted = formatUserGuess();\n      console.log(formatted);\n    }\n    if (key === \"Backspace\") {\n      setCurrentGuess(prev => prev.slice(0, -1));\n      return;\n    }\n    if (/^[A-Za-z]$/.test(key) && currentGuess.length < wordSolution.length) {\n      setCurrentGuess(prev => prev + key);\n    }\n  };\n  return {\n    turn,\n    currentGuess,\n    guesses,\n    isCorrect,\n    handleKeyUp\n  };\n};\n_s(useGame, \"cEsMVLAILFGQggpZhG+bSZgfUqA=\");\nexport default useGame;","map":{"version":3,"names":["useState","useEffect","useGame","wordSolution","_s","turn","setTurn","currentGuess","setCurrentGuess","guesses","setGuesses","history","setHistory","isCorrect","setIsCorrect","formatUserGuess","solutionArray","changeUserGuess","map","l","key","color","forEach","i","includes","indexOf","addNewGuess","formatted","handleKeyUp","console","log","length","prev","slice","test"],"sources":["C:/Users/Jacob Allen/Videos/Unit 4 - Javascript/React Project/unitproject/src/hooks/useGame.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst useGame = (wordSolution) => {\r\n  const [turn, setTurn] = useState(0);\r\n  const [currentGuess, setCurrentGuess] = useState(\"\");\r\n  const [guesses, setGuesses] = useState([]);\r\n  const [history, setHistory] = useState([]);\r\n  const [isCorrect, setIsCorrect] = useState(false);\r\n\r\n  const formatUserGuess = () => {\r\n    let solutionArray = [...wordSolution];\r\n    let changeUserGuess = [...currentGuess].map((l) => ({\r\n      key: l,\r\n      color: \"grey\",\r\n    }));\r\n\r\n    // Finds any green letters\r\n    changeUserGuess.forEach((l, i) => {\r\n      if (solutionArray[i] === l.key) {\r\n        changeUserGuess[i].color = \"green\";\r\n        solutionArray[i] = null;\r\n      }\r\n    });\r\n\r\n    // Finds any yellow letters\r\n    changeUserGuess.forEach((l, i) => {\r\n      if (solutionArray.includes(l.key) && l.color !== \"green\") {\r\n        changeUserGuess[i].color = \"yellow\";\r\n        solutionArray[solutionArray.indexOf(l.key)] = null; // Correcting to null\r\n      }\r\n    });\r\n\r\n    return changeUserGuess; // Returning the formatted guess\r\n  };\r\n\r\n  const addNewGuess = () => {\r\n    addNewGuess(formatted)\r\n  };\r\n\r\n  const handleKeyUp = ({ key }) => {\r\n    if (key === \"Enter\") {\r\n      if (turn > 5) {\r\n        console.log(\"All guesses have been used\");\r\n        return;\r\n      }\r\n\r\n      if (history.includes(currentGuess)) {\r\n        console.log(\"You have already guessed that word!\");\r\n        return;\r\n      }\r\n\r\n      if (currentGuess.length !== wordSolution.length) {\r\n        console.log(`Word must be ${wordSolution.length} chars long`);\r\n        return;\r\n      }\r\n\r\n      const formatted = formatUserGuess();\r\n      console.log(formatted);\r\n    }\r\n\r\n    if (key === \"Backspace\") {\r\n      setCurrentGuess((prev) => prev.slice(0, -1));\r\n      return;\r\n    }\r\n\r\n    if (/^[A-Za-z]$/.test(key) && currentGuess.length < wordSolution.length) {\r\n      setCurrentGuess((prev) => prev + key);\r\n    }\r\n  };\r\n\r\n  return { turn, currentGuess, guesses, isCorrect, handleKeyUp };\r\n};\r\n\r\nexport default useGame;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { wordSolution } from '../App.js';\nconst useGame = wordSolution => {\n  _s();\n  const [turn, setTurn] = useState(0);\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [guesses, setGuesses] = useState([]); //every guess is now an array\n  const [history, setHistory] = useState([]); //every guess is changed to a string\n  const [isCorrect, setIsCorrect] = useState(false);\n\n  //Formats the users guess into an array of letter objects\n  const formatUserGuess = () => {\n    let solutionArray = [...wordSolution];\n    let changeUserGuess = [...currentGuess].map(l => {\n      return {\n        key: l,\n        color: 'grey'\n      };\n    });\n\n    //finds any green letters\n    changeUserGuess.forEach((l, i) => {\n      if (solutionArray[i] === l.key) {\n        changeUserGuess[i].color = 'green';\n        solutionArray[i] = null;\n      }\n    });\n\n    //finds any \n  };\n  const addNewGuess = () => {};\n\n  //handleKeyUp function handles user input from the user's keyboard\n  //the key is passed into the .test method as an argument to make sure the user only types from A-Z\n  const handleKeyUp = ({\n    key\n  }) => {\n    if (key === 'Enter') {\n      if (turn > 5) {\n        console.log('all guesses have been used');\n        return;\n      }\n      if (history.includes(currentGuess)) {\n        console.log('you have already guessed that word!');\n        return;\n      }\n      if (currentGuess.length !== wordSolution.length) {\n        console.log(`word must be ${wordSolution.length} chars long`);\n        return;\n      }\n      formatUserGuess();\n    }\n\n    //console.log({wordSolution})}\n    if (key === 'Backspace') {\n      setCurrentGuess(prev => {\n        return prev.slice(0, -1);\n      });\n      return;\n    }\n    if (/^[A-Za-z]$/.test(key)) {\n      //checks to see if the random word has less length than the user's current guess\n      if (currentGuess.length < wordSolution.length) {\n        setCurrentGuess(prev => {\n          return prev + key;\n        });\n      }\n    }\n  };\n  return {\n    turn,\n    currentGuess,\n    guesses,\n    isCorrect,\n    handleKeyUp\n  };\n};\n_s(useGame, \"IVXWGlg92Q9wlAIzJ5cBAfAX2uI=\");\nexport default useGame;","map":{"version":3,"names":["useState","wordSolution","useGame","_s","turn","setTurn","currentGuess","setCurrentGuess","guesses","setGuesses","history","setHistory","isCorrect","setIsCorrect","formatUserGuess","solutionArray","changeUserGuess","map","l","key","color","forEach","i","addNewGuess","handleKeyUp","console","log","includes","length","prev","slice","test"],"sources":["C:/Users/Jacob Allen/Videos/Unit 4 - Javascript/React Project/unitproject/src/hooks/useGame.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport {wordSolution} from '../App.js';\r\n\r\nconst useGame = (wordSolution) => {\r\n    const [turn, setTurn] = useState(0)\r\n    const [currentGuess, setCurrentGuess] = useState('')\r\n    const [guesses, setGuesses] = useState([]) //every guess is now an array\r\n    const [history, setHistory] = useState([]) //every guess is changed to a string\r\n    const [isCorrect, setIsCorrect] = useState(false)\r\n\r\n\r\n\r\n    //Formats the users guess into an array of letter objects\r\n    const formatUserGuess = () => {\r\n        let solutionArray = [...wordSolution]\r\n        let changeUserGuess = [...currentGuess].map((l)=> {\r\n            return {key: l, color: 'grey'}\r\n\r\n        })\r\n\r\n        //finds any green letters\r\n        changeUserGuess.forEach((l, i) => {\r\n            if(solutionArray[i] === l.key) {\r\n                changeUserGuess[i].color = 'green'\r\n                solutionArray[i] = null\r\n            }\r\n        });\r\n\r\n        //finds any \r\n\r\n    }\r\n\r\n    const addNewGuess = () => {\r\n\r\n    }\r\n\r\n    //handleKeyUp function handles user input from the user's keyboard\r\n    //the key is passed into the .test method as an argument to make sure the user only types from A-Z\r\n    const handleKeyUp = ({ key }) => {\r\n        if (key === 'Enter') {\r\n            if (turn > 5) {\r\n                console.log('all guesses have been used')\r\n                return\r\n            }\r\n\r\n            if (history.includes(currentGuess)) {\r\n                console.log('you have already guessed that word!')\r\n                return\r\n            }\r\n\r\n            if (currentGuess.length !== wordSolution.length) {\r\n                console.log(`word must be ${wordSolution.length} chars long`)\r\n                return\r\n\r\n            }\r\n            formatUserGuess()\r\n        }\r\n        \r\n    //console.log({wordSolution})}\r\n        if (key === 'Backspace') {\r\n            setCurrentGuess(prev =>{\r\n                return prev.slice(0, -1)\r\n            })\r\n            return\r\n        }\r\n        if (/^[A-Za-z]$/.test(key)) {\r\n            //checks to see if the random word has less length than the user's current guess\r\n            if(currentGuess.length < wordSolution.length) {\r\n                setCurrentGuess((prev)=> {\r\n                    return prev + key\r\n                })\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    return {turn, currentGuess, guesses, isCorrect, handleKeyUp}\r\n\r\n}\r\n\r\nexport default useGame;"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAAQC,YAAY,QAAO,WAAW;AAEtC,MAAMC,OAAO,GAAID,YAAY,IAAK;EAAAE,EAAA;EAC9B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGL,QAAQ,CAAC,CAAC,CAAC;EACnC,MAAM,CAACM,YAAY,EAAEC,eAAe,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC,EAAC;EAC3C,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC,EAAC;EAC3C,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;;EAIjD;EACA,MAAMc,eAAe,GAAGA,CAAA,KAAM;IAC1B,IAAIC,aAAa,GAAG,CAAC,GAAGd,YAAY,CAAC;IACrC,IAAIe,eAAe,GAAG,CAAC,GAAGV,YAAY,CAAC,CAACW,GAAG,CAAEC,CAAC,IAAI;MAC9C,OAAO;QAACC,GAAG,EAAED,CAAC;QAAEE,KAAK,EAAE;MAAM,CAAC;IAElC,CAAC,CAAC;;IAEF;IACAJ,eAAe,CAACK,OAAO,CAAC,CAACH,CAAC,EAAEI,CAAC,KAAK;MAC9B,IAAGP,aAAa,CAACO,CAAC,CAAC,KAAKJ,CAAC,CAACC,GAAG,EAAE;QAC3BH,eAAe,CAACM,CAAC,CAAC,CAACF,KAAK,GAAG,OAAO;QAClCL,aAAa,CAACO,CAAC,CAAC,GAAG,IAAI;MAC3B;IACJ,CAAC,CAAC;;IAEF;EAEJ,CAAC;EAED,MAAMC,WAAW,GAAGA,CAAA,KAAM,CAE1B,CAAC;;EAED;EACA;EACA,MAAMC,WAAW,GAAGA,CAAC;IAAEL;EAAI,CAAC,KAAK;IAC7B,IAAIA,GAAG,KAAK,OAAO,EAAE;MACjB,IAAIf,IAAI,GAAG,CAAC,EAAE;QACVqB,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;QACzC;MACJ;MAEA,IAAIhB,OAAO,CAACiB,QAAQ,CAACrB,YAAY,CAAC,EAAE;QAChCmB,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;QAClD;MACJ;MAEA,IAAIpB,YAAY,CAACsB,MAAM,KAAK3B,YAAY,CAAC2B,MAAM,EAAE;QAC7CH,OAAO,CAACC,GAAG,CAAC,gBAAgBzB,YAAY,CAAC2B,MAAM,aAAa,CAAC;QAC7D;MAEJ;MACAd,eAAe,CAAC,CAAC;IACrB;;IAEJ;IACI,IAAIK,GAAG,KAAK,WAAW,EAAE;MACrBZ,eAAe,CAACsB,IAAI,IAAG;QACnB,OAAOA,IAAI,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;MAC5B,CAAC,CAAC;MACF;IACJ;IACA,IAAI,YAAY,CAACC,IAAI,CAACZ,GAAG,CAAC,EAAE;MACxB;MACA,IAAGb,YAAY,CAACsB,MAAM,GAAG3B,YAAY,CAAC2B,MAAM,EAAE;QAC1CrB,eAAe,CAAEsB,IAAI,IAAI;UACrB,OAAOA,IAAI,GAAGV,GAAG;QACrB,CAAC,CAAC;MACN;IACJ;EAEJ,CAAC;EAED,OAAO;IAACf,IAAI;IAAEE,YAAY;IAAEE,OAAO;IAAEI,SAAS;IAAEY;EAAW,CAAC;AAEhE,CAAC;AAAArB,EAAA,CA3EKD,OAAO;AA6Eb,eAAeA,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
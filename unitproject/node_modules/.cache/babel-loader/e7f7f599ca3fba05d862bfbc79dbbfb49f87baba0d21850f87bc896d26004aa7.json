{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nconst useGame = wordSolution => {\n  _s();\n  const [turn, setTurn] = useState(0);\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [guesses, setGuesses] = useState([]); //every guess is now an array\n  const [history, setHistory] = useState([]); //every guess is changed to a string\n  const [isCorrect, setIsCorrect] = useState(false);\n\n  //Formats the users guess into an array of letter objects\n  const formatUserGuess = () => {};\n  const addNewGuess = () => {};\n\n  //handleKeyUp function handles user input from the user's keyboard\n  //the key is passed into the .test method as an argument to make sure the user only types from A-Z\n  const handleKeyUp = ({\n    key\n  }) => {\n\n    /*if (/^[A-Za-z]$/.test(key)) {\r\n        if(currentGuess <)\r\n    }*/\n  };\n  return {\n    turn,\n    currentGuess,\n    guesses,\n    isCorrect,\n    handleKeyUp\n  };\n};\n_s(useGame, \"IVXWGlg92Q9wlAIzJ5cBAfAX2uI=\");\nexport default useGame;","map":{"version":3,"names":["useState","useGame","wordSolution","_s","turn","setTurn","currentGuess","setCurrentGuess","guesses","setGuesses","history","setHistory","isCorrect","setIsCorrect","formatUserGuess","addNewGuess","handleKeyUp","key"],"sources":["C:/Users/Jacob Allen/Videos/Unit 4 - Javascript/React Project/unitproject/src/hooks/useGame.js"],"sourcesContent":["import { useState } from \"react\";\r\n\r\nconst useGame = (wordSolution) => {\r\n    const [turn, setTurn] = useState(0)\r\n    const [currentGuess, setCurrentGuess] = useState('')\r\n    const [guesses, setGuesses] = useState([]) //every guess is now an array\r\n    const [history, setHistory] = useState([]) //every guess is changed to a string\r\n    const [isCorrect, setIsCorrect] = useState(false)\r\n\r\n\r\n\r\n    //Formats the users guess into an array of letter objects\r\n    const formatUserGuess = () => {\r\n\r\n    }\r\n\r\n    const addNewGuess = () => {\r\n\r\n    }\r\n\r\n    //handleKeyUp function handles user input from the user's keyboard\r\n    //the key is passed into the .test method as an argument to make sure the user only types from A-Z\r\n    const handleKeyUp = ({ key }) => {\r\n        \r\n        /*if (/^[A-Za-z]$/.test(key)) {\r\n            if(currentGuess <)\r\n        }*/\r\n    }\r\n\r\n    return {turn, currentGuess, guesses, isCorrect, handleKeyUp}\r\n\r\n}\r\n\r\nexport default useGame;"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,MAAMC,OAAO,GAAIC,YAAY,IAAK;EAAAC,EAAA;EAC9B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGL,QAAQ,CAAC,CAAC,CAAC;EACnC,MAAM,CAACM,YAAY,EAAEC,eAAe,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC,EAAC;EAC3C,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC,EAAC;EAC3C,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;;EAIjD;EACA,MAAMc,eAAe,GAAGA,CAAA,KAAM,CAE9B,CAAC;EAED,MAAMC,WAAW,GAAGA,CAAA,KAAM,CAE1B,CAAC;;EAED;EACA;EACA,MAAMC,WAAW,GAAGA,CAAC;IAAEC;EAAI,CAAC,KAAK;;IAE7B;AACR;AACA;EAFQ,CAGH;EAED,OAAO;IAACb,IAAI;IAAEE,YAAY;IAAEE,OAAO;IAAEI,SAAS;IAAEI;EAAW,CAAC;AAEhE,CAAC;AAAAb,EAAA,CA7BKF,OAAO;AA+Bb,eAAeA,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nconst useGame = wordSolution => {\n  _s();\n  const [turn, setTurn] = useState(0);\n  const [currentGuess, setCurrentGuess] = useState(\"\");\n  const [guesses, setGuesses] = useState([...Array(6)]);\n  const [history, setHistory] = useState([]);\n  const [isCorrect, setIsCorrect] = useState(false);\n  const formatUserGuess = () => {\n    let solutionArray = [...wordSolution];\n    const changeUserGuess = [...currentGuess].map(l => ({\n      key: l,\n      color: \"grey\"\n    }));\n\n    // Finds any green letters\n    changeUserGuess.forEach((l, i) => {\n      if (solutionArray[i] === l.key) {\n        changeUserGuess[i].color = \"green\";\n        solutionArray[i] = null;\n      }\n    });\n\n    // Finds any yellow letters\n    changeUserGuess.forEach((l, i) => {\n      if (solutionArray.includes(l.key) && l.color !== \"green\") {\n        changeUserGuess[i].color = \"yellow\";\n        solutionArray[solutionArray.indexOf(l.key)] = null; // Mark as used\n      }\n    });\n    return changeUserGuess;\n  };\n  const addNewGuess = changeUserGuess => {\n    if (currentGuess === wordSolution) {\n      setIsCorrect(true);\n    }\n    setGuesses(previousGuesses => {\n      const newUserAttempts = [...previousGuesses];\n      newUserAttempts[turn] = changeUserGuess;\n      return newUserAttempts;\n    });\n    setHistory(prevHistory => [...prevHistory, currentGuess]); // Append new guess to history\n    setTurn(prevTurn => prevTurn + 1);\n    setCurrentGuess('');\n  };\n  const handleKeyUp = ({\n    key\n  }) => {\n    if (key === \"Enter\") {\n      if (turn > 5) {\n        console.log(\"All guesses have been used\");\n        return;\n      }\n      if (history.includes(currentGuess)) {\n        console.log(\"You have already guessed that word!\");\n        return;\n      }\n      if (currentGuess.length !== wordSolution.length) {\n        console.log(`Word must be ${wordSolution.length} chars long`);\n        return;\n      }\n      const formatted = formatUserGuess();\n      addNewGuess(formatted);\n    }\n    if (key === \"Backspace\") {\n      setCurrentGuess(prev => prev.slice(0, -1));\n      return;\n    }\n    if (/^[A-Za-z]$/.test(key) && currentGuess.length < wordSolution.length) {\n      setCurrentGuess(prev => prev + key);\n    }\n  };\n  return {\n    turn,\n    currentGuess,\n    guesses,\n    isCorrect,\n    handleKeyUp\n  };\n};\n_s(useGame, \"hw5nrnJSVOAMQL0G15231ydQo+E=\");\nexport default useGame;","map":{"version":3,"names":["useState","useGame","wordSolution","_s","turn","setTurn","currentGuess","setCurrentGuess","guesses","setGuesses","Array","history","setHistory","isCorrect","setIsCorrect","formatUserGuess","solutionArray","changeUserGuess","map","l","key","color","forEach","i","includes","indexOf","addNewGuess","previousGuesses","newUserAttempts","prevHistory","prevTurn","handleKeyUp","console","log","length","formatted","prev","slice","test"],"sources":["C:/Users/Jacob Allen/Videos/Unit 4 - Javascript/React Project/unitproject/src/hooks/useGame.js"],"sourcesContent":["import { useState } from \"react\";\r\n\r\nconst useGame = (wordSolution) => {\r\n  const [turn, setTurn] = useState(0);\r\n  const [currentGuess, setCurrentGuess] = useState(\"\");\r\n  const [guesses, setGuesses] = useState([...Array(6)]);\r\n  const [history, setHistory] = useState([]); \r\n  const [isCorrect, setIsCorrect] = useState(false);\r\n\r\n  const formatUserGuess = () => {\r\n    let solutionArray = [...wordSolution];\r\n    const changeUserGuess = [...currentGuess].map((l) => ({\r\n      key: l,\r\n      color: \"grey\",\r\n    }));\r\n\r\n    // Finds any green letters\r\n    changeUserGuess.forEach((l, i) => {\r\n      if (solutionArray[i] === l.key) {\r\n        changeUserGuess[i].color = \"green\";\r\n        solutionArray[i] = null;\r\n      }\r\n    });\r\n\r\n    // Finds any yellow letters\r\n    changeUserGuess.forEach((l, i) => {\r\n      if (solutionArray.includes(l.key) && l.color !== \"green\") {\r\n        changeUserGuess[i].color = \"yellow\";\r\n        solutionArray[solutionArray.indexOf(l.key)] = null; // Mark as used\r\n      }\r\n    });\r\n\r\n    return changeUserGuess;\r\n  };\r\n\r\n  const addNewGuess = (changeUserGuess) => {\r\n    if (currentGuess === wordSolution) {\r\n      setIsCorrect(true);\r\n    }\r\n\r\n    setGuesses((previousGuesses) => {\r\n      const newUserAttempts = [...previousGuesses];\r\n      newUserAttempts[turn] = changeUserGuess;\r\n      return newUserAttempts;\r\n    });\r\n\r\n    setHistory((prevHistory) => [...prevHistory, currentGuess]); // Append new guess to history\r\n    setTurn((prevTurn) => prevTurn + 1);\r\n    setCurrentGuess('');\r\n  };\r\n\r\n  const handleKeyUp = ({ key }) => {\r\n    if (key === \"Enter\") {\r\n      if (turn > 5) {\r\n        console.log(\"All guesses have been used\");\r\n        return;\r\n      }\r\n\r\n      if (history.includes(currentGuess)) {\r\n        console.log(\"You have already guessed that word!\");\r\n        return;\r\n      }\r\n\r\n      if (currentGuess.length !== wordSolution.length) {\r\n        console.log(`Word must be ${wordSolution.length} chars long`);\r\n        return;\r\n      }\r\n\r\n      const formatted = formatUserGuess();\r\n      addNewGuess(formatted);\r\n    }\r\n\r\n    if (key === \"Backspace\") {\r\n      setCurrentGuess((prev) => prev.slice(0, -1));\r\n      return;\r\n    }\r\n\r\n    if (/^[A-Za-z]$/.test(key) && currentGuess.length < wordSolution.length) {\r\n      setCurrentGuess((prev) => prev + key);\r\n    }\r\n  };\r\n\r\n  return { turn, currentGuess, guesses, isCorrect, handleKeyUp };\r\n};\r\n\r\nexport default useGame;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
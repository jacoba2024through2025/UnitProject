{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nconst useGame = wordSolution => {\n  _s();\n  const [turn, setTurn] = useState(0);\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [guesses, setGuesses] = useState([]);\n  const [history, setHistory] = useState([]);\n  const [isCorrect, setIsCorrect] = useState(false);\n  const formatUserGuess = () => {\n    let solutionArray = [...wordSolution];\n    let changeUserGuess = [...currentGuess].map(l => ({\n      key: l,\n      color: 'grey'\n    }));\n\n    // Finds any green letters\n    changeUserGuess.forEach((l, i) => {\n      if (solutionArray[i] === l.key) {\n        changeUserGuess[i].color = 'green';\n        solutionArray[i] = null;\n      }\n    });\n\n    // Finds any yellow letters\n    changeUserGuess.forEach((l, i) => {\n      if (solutionArray.includes(l.key) && l.color !== 'green') {\n        changeUserGuess[i].color = 'yellow';\n        solutionArray[solutionArray.indexOf(l.key)] = null; // Correcting to null\n      }\n    });\n    return changeUserGuess; // Returning the formatted guess\n  };\n  const addNewGuess = () => {\n    const formattedGuess = formatUserGuess();\n    setGuesses(prev => [...prev, formattedGuess]);\n    setHistory(prev => [...prev, currentGuess]);\n    if (currentGuess === wordSolution) {\n      setIsCorrect(true);\n      console.log(\"Congratulations! You've guessed the word.\");\n    } else {\n      setTurn(prev => prev + 1);\n    }\n    setCurrentGuess(''); // Resetting current guess after adding\n  };\n  const handleKeyUp = ({\n    key\n  }) => {\n    if (key === 'Enter') {\n      if (turn > 5) {\n        console.log('All guesses have been used');\n        return;\n      }\n      if (history.includes(currentGuess)) {\n        console.log('You have already guessed that word!');\n        return;\n      }\n      if (currentGuess.length !== wordSolution.length) {\n        console.log(`Word must be ${wordSolution.length} chars long`);\n        return;\n      }\n      addNewGuess(); // Call to add new guess\n      return;\n    }\n    if (key === 'Backspace') {\n      setCurrentGuess(prev => prev.slice(0, -1));\n      return;\n    }\n    if (/^[A-Za-z]$/.test(key) && currentGuess.length < wordSolution.length) {\n      setCurrentGuess(prev => prev + key);\n    }\n  };\n  return {\n    turn,\n    currentGuess,\n    guesses,\n    isCorrect,\n    handleKeyUp\n  };\n};\n_s(useGame, \"IVXWGlg92Q9wlAIzJ5cBAfAX2uI=\");\nexport default useGame;","map":{"version":3,"names":["useState","useEffect","useGame","wordSolution","_s","turn","setTurn","currentGuess","setCurrentGuess","guesses","setGuesses","history","setHistory","isCorrect","setIsCorrect","formatUserGuess","solutionArray","changeUserGuess","map","l","key","color","forEach","i","includes","indexOf","addNewGuess","formattedGuess","prev","console","log","handleKeyUp","length","slice","test"],"sources":["C:/Users/Jacob Allen/Videos/Unit 4 - Javascript/React Project/unitproject/src/hooks/useGame.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst useGame = (wordSolution) => {\r\n    const [turn, setTurn] = useState(0);\r\n    const [currentGuess, setCurrentGuess] = useState('');\r\n    const [guesses, setGuesses] = useState([]);\r\n    const [history, setHistory] = useState([]);\r\n    const [isCorrect, setIsCorrect] = useState(false);\r\n\r\n    const formatUserGuess = () => {\r\n        let solutionArray = [...wordSolution];\r\n        let changeUserGuess = [...currentGuess].map((l) => ({ key: l, color: 'grey' }));\r\n\r\n        // Finds any green letters\r\n        changeUserGuess.forEach((l, i) => {\r\n            if (solutionArray[i] === l.key) {\r\n                changeUserGuess[i].color = 'green';\r\n                solutionArray[i] = null;\r\n            }\r\n        });\r\n\r\n        // Finds any yellow letters\r\n        changeUserGuess.forEach((l, i) => {\r\n            if (solutionArray.includes(l.key) && l.color !== 'green') {\r\n                changeUserGuess[i].color = 'yellow';\r\n                solutionArray[solutionArray.indexOf(l.key)] = null; // Correcting to null\r\n            }\r\n        });\r\n\r\n        return changeUserGuess; // Returning the formatted guess\r\n    };\r\n\r\n    const addNewGuess = () => {\r\n        const formattedGuess = formatUserGuess();\r\n        setGuesses((prev) => [...prev, formattedGuess]);\r\n        setHistory((prev) => [...prev, currentGuess]);\r\n\r\n        if (currentGuess === wordSolution) {\r\n            setIsCorrect(true);\r\n            console.log(\"Congratulations! You've guessed the word.\");\r\n        } else {\r\n            setTurn((prev) => prev + 1);\r\n        }\r\n\r\n        setCurrentGuess(''); // Resetting current guess after adding\r\n    };\r\n\r\n    const handleKeyUp = ({ key }) => {\r\n        if (key === 'Enter') {\r\n            if (turn > 5) {\r\n                console.log('All guesses have been used');\r\n                return;\r\n            }\r\n\r\n            if (history.includes(currentGuess)) {\r\n                console.log('You have already guessed that word!');\r\n                return;\r\n            }\r\n\r\n            if (currentGuess.length !== wordSolution.length) {\r\n                console.log(`Word must be ${wordSolution.length} chars long`);\r\n                return;\r\n            }\r\n\r\n            addNewGuess(); // Call to add new guess\r\n            return;\r\n        }\r\n\r\n        if (key === 'Backspace') {\r\n            setCurrentGuess((prev) => prev.slice(0, -1));\r\n            return;\r\n        }\r\n\r\n        if (/^[A-Za-z]$/.test(key) && currentGuess.length < wordSolution.length) {\r\n            setCurrentGuess((prev) => prev + key);\r\n        }\r\n    };\r\n\r\n    return { turn, currentGuess, guesses, isCorrect, handleKeyUp };\r\n};\r\n\r\nexport default useGame;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
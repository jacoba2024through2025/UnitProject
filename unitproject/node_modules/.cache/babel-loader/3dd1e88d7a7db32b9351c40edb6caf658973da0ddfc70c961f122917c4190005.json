{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jacob Allen\\\\Videos\\\\Unit 4 - Javascript\\\\React Project\\\\unitproject\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Wordle from './components/Wordle';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  //wordSolution is the random solution for each game the user wants to play\n  const [wordSolution, setWord] = useState('');\n  const changeWordToShow = () => {\n    fetch('https://random-word-api.herokuapp.com/word').then(response => {\n      return response.json();\n    }).then(data => {\n      if (data.length > 0) {\n        for (let word of data) {\n          setWord(word);\n          console.log(word);\n          break;\n        }\n      }\n    }).catch(err => {\n      console.log(\"Error Reading data \" + err);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: () => changeWordToShow(),\n      children: \"Change Word \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 4\n    }, this), wordSolution && /*#__PURE__*/_jsxDEV(Wordle, {\n      wordSolution: wordSolution\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 21\n    }, this), wordSolution]\n  }, void 0, true);\n}\n_s(App, \"bflliZk96JvHyqe1rMC9QxGLtyQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Wordle","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","wordSolution","setWord","changeWordToShow","fetch","then","response","json","data","length","word","console","log","catch","err","children","type","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Jacob Allen/Videos/Unit 4 - Javascript/React Project/unitproject/src/App.js"],"sourcesContent":["import React, { useState } from 'react'\nimport Wordle from './components/Wordle'\n\n\n\nfunction App() {\n\t//wordSolution is the random solution for each game the user wants to play\n\tconst [wordSolution, setWord] = useState('')\n\t\t\n\tconst changeWordToShow= () =>{\n\tfetch('https://random-word-api.herokuapp.com/word')\n\t.then((response) => {\n\t\treturn response.json();\n\t\t})\n\t.then(data => {\n\t\tif (data.length > 0) {\n\t\t\tfor(let word of data){\n\t\t\t\tsetWord(word);\n\t\t\t\tconsole.log(word)\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t}).catch(err => {\n\t\t\n\t\tconsole.log(\"Error Reading data \" + err);\n\t});\n\t}\n\t  \n\treturn (\n\t\t<>\n\t\t\t<button type= \"button\" onClick={()=>changeWordToShow()}>Change Word </button>\n\t\t\t{wordSolution && <Wordle wordSolution={wordSolution} /> }\n\t\t\t{wordSolution}\n\t\t\t\n\t\t</>\n\t\t\n\t\t\n\t\t\n\t\n\t\t\n\t);\n}\n\n\n\texport default App;\n\t\n\t  \n\t\n\n\n\t\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,MAAM,MAAM,qBAAqB;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAIxC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACd;EACA,MAAM,CAACC,YAAY,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMU,gBAAgB,GAAEA,CAAA,KAAK;IAC7BC,KAAK,CAAC,4CAA4C,CAAC,CAClDC,IAAI,CAAEC,QAAQ,IAAK;MACnB,OAAOA,QAAQ,CAACC,IAAI,CAAC,CAAC;IACtB,CAAC,CAAC,CACFF,IAAI,CAACG,IAAI,IAAI;MACb,IAAIA,IAAI,CAACC,MAAM,GAAG,CAAC,EAAE;QACpB,KAAI,IAAIC,IAAI,IAAIF,IAAI,EAAC;UACpBN,OAAO,CAACQ,IAAI,CAAC;UACbC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;UACjB;QAED;MACD;IAGD,CAAC,CAAC,CAACG,KAAK,CAACC,GAAG,IAAI;MAEfH,OAAO,CAACC,GAAG,CAAC,qBAAqB,GAAGE,GAAG,CAAC;IACzC,CAAC,CAAC;EACF,CAAC;EAED,oBACClB,OAAA,CAAAE,SAAA;IAAAiB,QAAA,gBACCnB,OAAA;MAAQoB,IAAI,EAAE,QAAQ;MAACC,OAAO,EAAEA,CAAA,KAAId,gBAAgB,CAAC,CAAE;MAAAY,QAAA,EAAC;IAAY;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAC5EpB,YAAY,iBAAIL,OAAA,CAACF,MAAM;MAACO,YAAY,EAAEA;IAAa;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACtDpB,YAAY;EAAA,eAEZ,CAAC;AAOL;AAACD,EAAA,CAvCQD,GAAG;AAAAuB,EAAA,GAAHvB,GAAG;AA0CX,eAAeA,GAAG;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
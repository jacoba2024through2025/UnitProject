{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { wordSolution } from '../App.js';\nconst useGame = wordSolution => {\n  _s();\n  const [turn, setTurn] = useState(0);\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [guesses, setGuesses] = useState([]); //every guess is now an array\n  const [history, setHistory] = useState([]); //every guess is changed to a string\n  const [isCorrect, setIsCorrect] = useState(false);\n  console.log({\n    wordSolution\n  });\n};\n\n//Formats the users guess into an array of letter objects\n_s(useGame, \"IVXWGlg92Q9wlAIzJ5cBAfAX2uI=\");\nconst formatUserGuess = () => {};\nconst addNewGuess = () => {};\n\n//handleKeyUp function handles user input from the user's keyboard\n//the key is passed into the .test method as an argument to make sure the user only types from A-Z\nconst handleKeyUp = ({\n  key\n}) => {\n  if (/^[A-Za-z]$/.test(key)) {\n    //checks to see if the random word has less length than the user's current guess\n    if (currentGuess.length < 5) {\n      setCurrentGuess(prev => {\n        return prev + key;\n      });\n    }\n  }\n  return {\n    turn,\n    currentGuess,\n    guesses,\n    isCorrect,\n    handleKeyUp\n  };\n};\n\n//return {turn, currentGuess, guesses, isCorrect, handleKeyUp}\n\nexport default useGame;","map":{"version":3,"names":["useState","wordSolution","useGame","_s","turn","setTurn","currentGuess","setCurrentGuess","guesses","setGuesses","history","setHistory","isCorrect","setIsCorrect","console","log","formatUserGuess","addNewGuess","handleKeyUp","key","test","length","prev"],"sources":["C:/Users/Jacob Allen/Videos/Unit 4 - Javascript/React Project/unitproject/src/hooks/useGame.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport {wordSolution} from '../App.js';\r\n\r\nconst useGame = (wordSolution) => {\r\n    const [turn, setTurn] = useState(0)\r\n    const [currentGuess, setCurrentGuess] = useState('')\r\n    const [guesses, setGuesses] = useState([]) //every guess is now an array\r\n    const [history, setHistory] = useState([]) //every guess is changed to a string\r\n    const [isCorrect, setIsCorrect] = useState(false)\r\n\r\n    console.log({wordSolution})}\r\n\r\n    //Formats the users guess into an array of letter objects\r\n    const formatUserGuess = () => {\r\n\r\n    }\r\n\r\n    const addNewGuess = () => {\r\n\r\n    }\r\n\r\n    //handleKeyUp function handles user input from the user's keyboard\r\n    //the key is passed into the .test method as an argument to make sure the user only types from A-Z\r\n    const handleKeyUp = ({ key }) => {\r\n        \r\n        if (/^[A-Za-z]$/.test(key)) {\r\n            //checks to see if the random word has less length than the user's current guess\r\n            if(currentGuess.length < 5) {\r\n                setCurrentGuess((prev)=> {\r\n                    return prev + key\r\n                })\r\n            }\r\n        }\r\n        return {turn, currentGuess, guesses, isCorrect, handleKeyUp}\r\n    }\r\n\r\n    //return {turn, currentGuess, guesses, isCorrect, handleKeyUp}\r\n\r\n\r\n\r\nexport default useGame;"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAAQC,YAAY,QAAO,WAAW;AAEtC,MAAMC,OAAO,GAAID,YAAY,IAAK;EAAAE,EAAA;EAC9B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGL,QAAQ,CAAC,CAAC,CAAC;EACnC,MAAM,CAACM,YAAY,EAAEC,eAAe,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC,EAAC;EAC3C,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC,EAAC;EAC3C,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAEjDc,OAAO,CAACC,GAAG,CAAC;IAACd;EAAY,CAAC,CAAC;AAAA,CAAC;;AAE5B;AAAAE,EAAA,CATED,OAAO;AAUT,MAAMc,eAAe,GAAGA,CAAA,KAAM,CAE9B,CAAC;AAED,MAAMC,WAAW,GAAGA,CAAA,KAAM,CAE1B,CAAC;;AAED;AACA;AACA,MAAMC,WAAW,GAAGA,CAAC;EAAEC;AAAI,CAAC,KAAK;EAE7B,IAAI,YAAY,CAACC,IAAI,CAACD,GAAG,CAAC,EAAE;IACxB;IACA,IAAGb,YAAY,CAACe,MAAM,GAAG,CAAC,EAAE;MACxBd,eAAe,CAAEe,IAAI,IAAI;QACrB,OAAOA,IAAI,GAAGH,GAAG;MACrB,CAAC,CAAC;IACN;EACJ;EACA,OAAO;IAACf,IAAI;IAAEE,YAAY;IAAEE,OAAO;IAAEI,SAAS;IAAEM;EAAW,CAAC;AAChE,CAAC;;AAED;;AAIJ,eAAehB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zombi\\\\Desktop\\\\React Project\\\\UnitProject\\\\unitproject\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\nimport Wordle from './components/Wordle';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  //wordSolution is the random solution for each game the user wants to play\n  const [wordSolution, setWord] = useState('');\n  const changeWordToShow = useCallback(() => {\n    fetch('https://random-word-api.herokuapp.com/word').then(response => response.json()).then(data => {\n      if (data.length > 0) {\n        setWord(data[0]); // Set only the first word\n      }\n    }).catch(err => {\n      console.log(\"Error \" + err);\n    });\n  }, []); // Only create a new function on mount\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: () => changeWordToShow(),\n      children: \"Change Word \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 4\n    }, this), wordSolution && /*#__PURE__*/_jsxDEV(Wordle, {\n      wordSolution: wordSolution\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 21\n    }, this), \"Word name: \", wordSolution, \" Length: \", wordSolution.length]\n  }, void 0, true);\n}\n_s(App, \"3Crml1qzjR8l3IFiGiq+SXF4/w0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useCallback","Wordle","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","wordSolution","setWord","changeWordToShow","fetch","then","response","json","data","length","catch","err","console","log","children","type","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/zombi/Desktop/React Project/UnitProject/unitproject/src/App.js"],"sourcesContent":["import React, { useState, useCallback } from 'react'\r\n\r\nimport Wordle from './components/Wordle'\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n\t//wordSolution is the random solution for each game the user wants to play\r\n\tconst [wordSolution, setWord] = useState('')\r\n\t\r\n\t\r\n\t\t\r\n\tconst changeWordToShow = useCallback(() => {\r\n\t\tfetch('https://random-word-api.herokuapp.com/word')\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(data => {\r\n\t\t\t\tif (data.length > 0) {\r\n\t\t\t\t\tsetWord(data[0]); // Set only the first word\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\tconsole.log(\"Error \" + err);\r\n\t\t\t});\r\n\t}, []); // Only create a new function on mount\r\n\r\n\t\r\n\t\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<button type= \"button\" onClick={()=>changeWordToShow()}>Change Word </button>\r\n\t\t\t{wordSolution && <Wordle wordSolution={wordSolution} /> }\r\n\t\t\tWord name: {wordSolution} Length: {wordSolution.length}\r\n\t\t\t\r\n\t\t</>\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\r\n\t\t\r\n\t);\r\n}\r\n\r\n\r\n\texport default App;\r\n\t\r\n\t  \r\n\t\r\n\r\n\r\n\t\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAEpD,OAAOC,MAAM,MAAM,qBAAqB;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAKxC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACd;EACA,MAAM,CAACC,YAAY,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAI5C,MAAMW,gBAAgB,GAAGV,WAAW,CAAC,MAAM;IAC1CW,KAAK,CAAC,4CAA4C,CAAC,CACjDC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;MACb,IAAIA,IAAI,CAACC,MAAM,GAAG,CAAC,EAAE;QACpBP,OAAO,CAACM,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACnB;IACD,CAAC,CAAC,CACDE,KAAK,CAACC,GAAG,IAAI;MACbC,OAAO,CAACC,GAAG,CAAC,QAAQ,GAAGF,GAAG,CAAC;IAC5B,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAIR,oBACCf,OAAA,CAAAE,SAAA;IAAAgB,QAAA,gBACClB,OAAA;MAAQmB,IAAI,EAAE,QAAQ;MAACC,OAAO,EAAEA,CAAA,KAAIb,gBAAgB,CAAC,CAAE;MAAAW,QAAA,EAAC;IAAY;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAC5EnB,YAAY,iBAAIL,OAAA,CAACF,MAAM;MAACO,YAAY,EAAEA;IAAa;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAAE,aAC9C,EAACnB,YAAY,EAAC,WAAS,EAACA,YAAY,CAACQ,MAAM;EAAA,eAErD,CAAC;AAOL;AAACT,EAAA,CAlCQD,GAAG;AAAAsB,EAAA,GAAHtB,GAAG;AAqCX,eAAeA,GAAG;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}